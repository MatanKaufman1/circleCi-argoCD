version: 2.1
orbs:
  slack: circleci/slack@5.1.1
  terraform: circleci/terraform@3.4.0
  aws-cli: circleci/aws-cli@5.1.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: docker build -t web-app-circleci:${CIRCLE_BUILD_NUM} .
      - run:
          name: Run Docker Container
          command: docker run -d --name web-app -p 5000:5000 web-app-circleci:${CIRCLE_BUILD_NUM}
      - run:
          name: Smoke Test
          command: |
            sleep 5
            container_ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' web-app)
            echo "CONTAINER_IP: $container_ip"
            sed -i "s/localhost/$container_ip/g" tests/check-connectivity.py
            python3 tests/check-connectivity.py | tee /tmp/test_result.txt
      - run:
          name: Store Test Result
          command: |
            test_result=$(cat /tmp/test_result.txt)
            echo "export TEST_RESULT='$test_result'" >> $BASH_ENV
      - slack/notify:
          channel: "#circleci"
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Web-app smoke test result for commit $CIRCLE_SHA1:",
                      "emoji": true
                    },
                    {
                      "type": "plain_text",
                      "text": "The test result is: $TEST_RESULT",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
      - run:
          name: Login to GitLab
          command:
           echo "$GITLAB_PASSWORD" | docker login registry.gitlab.com -u "$GITLAB_LOGIN" --password-stdin
      - run:
          name: Tag Image
          command: docker tag web-app-circleci:${CIRCLE_BUILD_NUM} registry.gitlab.com/matan2883831/circleci-argocd:${CIRCLE_BUILD_NUM}
      - run:
          name: Push to GitLab
          command: docker push registry.gitlab.com/matan2883831/circleci-argocd:${CIRCLE_BUILD_NUM}

  checkov:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install Checkov
          command: |
            python -m pip install --upgrade pip
            pip install checkov
      - run:
          name: Run Checkov Scan(static test)
          command: |
            checkov -d terraform/ --quiet 

  
  terratest_and_cluster:
    docker:
      - image: cimg/go:1.21.1
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install OpenTofu
          command: |
            curl -Lo tofu.tar.gz https://github.com/opentofu/opentofu/releases/download/v1.8.5/tofu_1.8.5_linux_amd64.tar.gz
            tar -xzf tofu.tar.gz
            chmod +x tofu
            sudo mv tofu /usr/local/bin/
      - run:
          name: Install dependencies
          command: |
            cd terraform/test
            tofu init
            go mod tidy
      - run:
          name: Run Terratest
          command: |
            cd terraform/test
            tofu init
            tofu destroy
            go test -v -timeout 30m
  
  setup-argocd:
    docker:
      - image: cimg/deploy:2024.11.1
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup
      - aws-eks/setup
      - kubernetes/install-kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks update-kubeconfig --region eu-central-1 --name circleci-eks
      - run:
          name: Install ArgoCD
          command: |
            kubectl create namespace argocd || true
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
      - run:
          name: Fetch ArgoCD Password
          command: |
            export ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)
            echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $BASH_ENV
      - run:
          name: Create Docker Registry Secret
          command: |
            kubectl create secret docker-registry gitlab-registry-secret-2 || true\
              --docker-server=registry.gitlab.com \
              --docker-username=matan \
              --docker-password=$GITLAB_PASSWORD
      - run:
          name: instal argoCD-cli
          command: |
              curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
              sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
              rm argocd-linux-amd64
      - run:
          name: Access ArgoCD Server
          command: |
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            sleep 5
            export ARGOCD_SERVER=localhost:8080
            echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $BASH_ENV
      - run:
          name: Access and Login to ArgoCD
          command: |
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            sleep 5
            export ARGOCD_SERVER=localhost:8080
            argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_PASSWORD --insecure

      - run:
          name: Add GitLab Repository to ArgoCD and Login
          command: |
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            sleep 5
            argocd repo add https://gitlab.com/matan2883831/circleci-argocd.git \
              --username "$GITLAB_LOGIN" \
              --password "$GITLAB_PASSWORD" \
              --insecure
            echo "$GITLAB_PASSWORD" | docker login registry.gitlab.com --username "$GITLAB_LOGIN" --password-stdin


      - run:
          name: Deploy Application
          command: |
            kubectl apply -f argoCD/deployment.yaml
            kubectl expose -f argoCD/service.yaml


workflows:
  build-and-notify:
    jobs:
      - setup-argocd
